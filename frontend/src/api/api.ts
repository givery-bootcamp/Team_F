/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * WebÈñãÁô∫Á†î‰øÆ API
 * FY24ÂçíWebÈñãÁô∫Á†î‰øÆ6Áè≠„ÅÆAPI‰ªïÊßòÊõ∏„Åß„Åô„ÄÇ

 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Post
} from './model'



/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPosts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post[]>> => {
    
    return axios.default.get(
      `/posts`,options
    );
  }


export const getGetPostsQueryKey = () => {
    return [`/posts`] as const;
    }

    
export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = AxiosError<void>

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPosts = <TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPostsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPostsPostId = (
    postId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Post>> => {
    
    return axios.default.get(
      `/posts/${postId}`,options
    );
  }


export const getGetPostsPostIdQueryKey = (postId: number,) => {
    return [`/posts/${postId}`] as const;
    }

    
export const getGetPostsPostIdQueryOptions = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = AxiosError<void>>(postId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsPostIdQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsPostId>>> = ({ signal }) => getPostsPostId(postId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsPostIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsPostId>>>
export type GetPostsPostIdQueryError = AxiosError<void>

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPostsPostId = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = AxiosError<void>>(
 postId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPostsPostIdQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




