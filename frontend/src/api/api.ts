/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * WebÈñãÁô∫Á†î‰øÆ API
 * FY24ÂçíWebÈñãÁô∫Á†î‰øÆ6Áè≠„ÅÆAPI‰ªïÊßòÊõ∏„Åß„Åô„ÄÇ

 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { LoginRequest, Post, CreatePost, User } from './model'
import { customInstance } from '../shared/libs/axios'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPosts = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<Post[]>({ url: `/posts`, method: 'GET', signal }, options)
}

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const
}

export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = void>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = void

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPosts = <TData = Awaited<ReturnType<typeof getPosts>>, TError = void>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPostsPostId = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<Post>({ url: `/posts/${postId}`, method: 'GET', signal }, options)
}

export const getGetPostsPostIdQueryKey = (postId: number) => {
  return [`/posts/${postId}`] as const
}

export const getGetPostsPostIdQueryOptions = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = void>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPostsPostIdQueryKey(postId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsPostId>>> = ({ signal }) =>
    getPostsPostId(postId, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!postId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPostsPostId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPostsPostIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsPostId>>>
export type GetPostsPostIdQueryError = void

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPostsPostId = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = void>(
  postId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPostsPostIdQueryOptions(postId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const postSignin = (loginRequest: LoginRequest, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<User>(
    { url: `/signin`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: loginRequest },
    options
  )
}

export const getPostSigninMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError, { data: LoginRequest }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError, { data: LoginRequest }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSignin>>, { data: LoginRequest }> = (props) => {
    const { data } = props ?? {}

    return postSignin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSigninMutationResult = NonNullable<Awaited<ReturnType<typeof postSignin>>>
export type PostSigninMutationBody = LoginRequest
export type PostSigninMutationError = unknown

/**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostSignin = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignin>>, TError, { data: LoginRequest }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof postSignin>>, TError, { data: LoginRequest }, TContext> => {
  const mutationOptions = getPostSigninMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const postSignout = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/signout`, method: 'POST' }, options)
}

export const getPostSignoutMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignout>>, TError, void, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof postSignout>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSignout>>, void> = () => {
    return postSignout(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSignoutMutationResult = NonNullable<Awaited<ReturnType<typeof postSignout>>>

export type PostSignoutMutationError = unknown

/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const usePostSignout = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignout>>, TError, void, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof postSignout>>, TError, void, TContext> => {
  const mutationOptions = getPostSignoutMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary ÁèæÂú®„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„ÇíÂèñÂæó
 */
export const getUser = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<User>({ url: `/user`, method: 'GET', signal }, options)
}

export const getGetUserQueryKey = () => {
  return [`/user`] as const
}

export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUser>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = unknown

/**
 * @summary ÁèæÂú®„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„ÇíÂèñÂæó
 */
export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Êñ∞„Åó„ÅÑÊäïÁ®ø„Çí‰ΩúÊàê
 */
export const postPosts = (post: CreatePost, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<CreatePost>(
    { url: `/posts`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: post },
    options
  )
}

export const getPostPostsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError, { data: CreatePost }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError, { data: CreatePost }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPosts>>, { data: CreatePost }> = (props) => {
    const { data } = props ?? {}

    return postPosts(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postPosts>>>
export type PostPostsMutationBody = CreatePost
export type PostPostsMutationError = unknown

/**
 * @summary Êñ∞„Åó„ÅÑÊäïÁ®ø„Çí‰ΩúÊàê
 */
export const usePostPosts = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError, { data: CreatePost }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof postPosts>>, TError, { data: CreatePost }, TContext> => {
  const mutationOptions = getPostPostsMutationOptions(options)

  return useMutation(mutationOptions)
}
