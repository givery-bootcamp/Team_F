// Code generated by MockGen. DO NOT EDIT.
// Source: hello_world_repository.go
//
// Generated by this command:
//
//	mockgen -source=hello_world_repository.go -destination=hello_world_repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "myapp/core/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHelloWorldRepository is a mock of HelloWorldRepository interface.
type MockHelloWorldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldRepositoryMockRecorder
}

// MockHelloWorldRepositoryMockRecorder is the mock recorder for MockHelloWorldRepository.
type MockHelloWorldRepositoryMockRecorder struct {
	mock *MockHelloWorldRepository
}

// NewMockHelloWorldRepository creates a new mock instance.
func NewMockHelloWorldRepository(ctrl *gomock.Controller) *MockHelloWorldRepository {
	mock := &MockHelloWorldRepository{ctrl: ctrl}
	mock.recorder = &MockHelloWorldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldRepository) EXPECT() *MockHelloWorldRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHelloWorldRepository) Get(ctx context.Context, lang string) (model.HelloWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, lang)
	ret0, _ := ret[0].(model.HelloWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHelloWorldRepositoryMockRecorder) Get(ctx, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHelloWorldRepository)(nil).Get), ctx, lang)
}
