// Code generated by MockGen. DO NOT EDIT.
// Source: get_post_detail_usecase.go
//
// Generated by this command:
//
//	mockgen -source=get_post_detail_usecase.go -destination=get_post_detail_usecase_mock.go -package=application
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetPostDetailUsecase is a mock of GetPostDetailUsecase interface.
type MockGetPostDetailUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetPostDetailUsecaseMockRecorder
}

// MockGetPostDetailUsecaseMockRecorder is the mock recorder for MockGetPostDetailUsecase.
type MockGetPostDetailUsecaseMockRecorder struct {
	mock *MockGetPostDetailUsecase
}

// NewMockGetPostDetailUsecase creates a new mock instance.
func NewMockGetPostDetailUsecase(ctrl *gomock.Controller) *MockGetPostDetailUsecase {
	mock := &MockGetPostDetailUsecase{ctrl: ctrl}
	mock.recorder = &MockGetPostDetailUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPostDetailUsecase) EXPECT() *MockGetPostDetailUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetPostDetailUsecase) Execute(ctx context.Context, input GetPostDetailUsecaseInput) (GetPostDetailUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(GetPostDetailUsecaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetPostDetailUsecaseMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetPostDetailUsecase)(nil).Execute), ctx, input)
}
