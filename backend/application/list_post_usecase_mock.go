// Code generated by MockGen. DO NOT EDIT.
// Source: list_post_usecase.go
//
// Generated by this command:
//
//	mockgen -source=list_post_usecase.go -destination=list_post_usecase_mock.go -package=application
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockListPostUsecase is a mock of ListPostUsecase interface.
type MockListPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockListPostUsecaseMockRecorder
}

// MockListPostUsecaseMockRecorder is the mock recorder for MockListPostUsecase.
type MockListPostUsecaseMockRecorder struct {
	mock *MockListPostUsecase
}

// NewMockListPostUsecase creates a new mock instance.
func NewMockListPostUsecase(ctrl *gomock.Controller) *MockListPostUsecase {
	mock := &MockListPostUsecase{ctrl: ctrl}
	mock.recorder = &MockListPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListPostUsecase) EXPECT() *MockListPostUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListPostUsecase) Execute(ctx context.Context) (ListPostUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(ListPostUsecaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListPostUsecaseMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListPostUsecase)(nil).Execute), ctx)
}
