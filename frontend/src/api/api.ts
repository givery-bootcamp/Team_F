/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * WebÈñãÁô∫Á†î‰øÆ API
 * FY24ÂçíWebÈñãÁô∫Á†î‰øÆ6Áè≠„ÅÆAPI‰ªïÊßòÊõ∏„Åß„Åô„ÄÇ

 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Post
} from './model'
import { customInstance } from '../shared/libs/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPosts = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Post[]>(
      {url: `/posts`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPostsQueryKey = () => {
    return [`/posts`] as const;
    }

    
export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = void

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPosts = <TData = Awaited<ReturnType<typeof getPosts>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPostsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const getPostsPostId = (
    postId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Post>(
      {url: `/posts/${postId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPostsPostIdQueryKey = (postId: number,) => {
    return [`/posts/${postId}`] as const;
    }

    
export const getGetPostsPostIdQueryOptions = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = void>(postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsPostIdQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsPostId>>> = ({ signal }) => getPostsPostId(postId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsPostIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsPostId>>>
export type GetPostsPostIdQueryError = void

/**
 * @summary ÊäïÁ®ø„ÅÆ‰∏ÄË¶ß
 */
export const useGetPostsPostId = <TData = Awaited<ReturnType<typeof getPostsPostId>>, TError = void>(
 postId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsPostId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPostsPostIdQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




